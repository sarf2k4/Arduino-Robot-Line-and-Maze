#include <ArduinoRobot.h>
#include <Wire.h>
#include <SPI.h>
#include <Timer.h>

double THRESHOLD =600;
double MULTIPLIER =75; //values in %

double Speed = 255*(MULTIPLIER/100);
int State = 0;

int irs[5],irs2[5];

//pid vars
double IRScore;
const int MAX_SPEED = 255;
const int MIN_SPEED = 0;
const int TARGET = 50;
double error = 0;
double lasterror;
double motorgain;
double leftmotorspeed;
double rightmotorspeed;

double divider = 1;

double Kp = 3.75;
double Kd = 10000;

double lms,rms;
double integral1, error1, perror1, derivative1, output1, p1, i1, d1,dt1;

int state, lprob , rprob, probet, rsense, fprobe, lprobe, sprobe, dly;
int lfprobe, rtprobe;

#define LRS TKD2
#define FRS TKD1
#define RRS TKD0

//linef2
double acu, last_error2, error2, KP2, KD2;

//new wall
int mint = 300;
unsigned long pmill;
int uturn = 0;

//timers
int turntime, ticks, tev;
Timer tt;

void setup()
{  
  integral1 = 0;
  perror1 = 0;
  p1 = 10;
  //p1 = 4;
  i1 = 1;
  //d1 = 900;
  d1 = 1200;
  dt1 = 25;

  State = 0;
  probet = 100;
  rsense = 1;  
  sprobe = 0;
  dly = 500;

  Serial.begin(9600);
  Robot.begin();

}

void loop()
{
  //Serial.println(State);
  lfprobe = range(LRS);
  rtprobe = range(RRS);
  fprobe = range(FRS);

  if (lfprobe < 0 )
    lfprobe = 1000;
  if (rtprobe < 0 )
    rtprobe = 1000;
  if (fprobe < 0 )
    fprobe = 1000;

  Serial.print(lfprobe);
  Serial.print(" ");
  Serial.print(fprobe);
  Serial.print(" ");
  Serial.print(rtprobe);
  Serial.println();

  modech();

  if(State == 0)
  {
    linef2();
    Serial.println("linef");
    //delay(1000);
  }
  
  if(State == 1)
  { 
    Serial.println("wallf");
    wallf();
  }
}

void wallf(){
  double centr,centl, jun;
  
  //Serial.println("wallf");
  fprobe = range(TKD1);
  lprobe = range(TKD2);
  rtprobe = range(TKD0);
  
  
  
  if (lprobe < 0 )
    lfprobe = 1000;
  if (rtprobe < 0 )
    rtprobe = 1000;
  if (fprobe < 0 )
    fprobe = 1000;
  if (lprobe == rtprobe)
  {
    centl = lprobe;
    centr = rtprobe;
  }
if(1)
{
  if ((lprobe > 175) || (lprobe > 175 && rtprobe > 175))
  {
    treset();
    Robot.motorsWrite (110,110);
    if (fprobe <90 && lprobe > 175)
    {
      Robot.motorsStop();
      tleft();
      Robot.motorsWrite (110,110);
      tstop();
      delay(1000);
    }
    
    if((tev >= 3) && (lprobe > 175))
    {
      Robot.motorsStop();
      tleft();
      Robot.motorsWrite (110,110);
      tstop();
      delay(1000);
    }
    tstop();
    Serial.println("tleft");
    sprobe = 1;
  }
  if ((rtprobe > 175))
  {
    treset();
    Robot.motorsWrite (110,110);
    if (fprobe < 90 && rtprobe > 175 && lprobe < 150)
    {
      Robot.motorsStop();
      tright();
      Robot.motorsWrite (110,110);
      tstop();
      delay(1000);
    }
    
    if((tev >= 3) && (lprobe > 175))
    {
      Robot.motorsStop();
      tleft();
      Robot.motorsWrite (110,110);
      tstop();
      delay(1000);
    }
      
    if (rtprobe > 175 && uturn == 1)
    {
      uturn = 0;
      Robot.motorsWrite (110,110);
      delay(300);
      tright();
      Robot.motorsWrite (110,110);
      tstop();
      delay(1000);
    }
    tstop();
    Serial.println("tleft2");
    sprobe = 1;
  }
  if (lprobe < 150 && fprobe < 90 && rtprobe < 150 && uturn == 0)
  {
    uturn = 1;
    tleft();
    delay(100);
    tleft();
  }
}
  

  error1 = rtprobe - lprobe;
  integral1 = integral1 + (error*dt1);
  derivative1 = (error1 - perror1)/dt1;
  output1 = p1 * error1 + i1 * integral1 + d1 * derivative1;
  perror1 = error1;

  lms = Speed + output1;
  rms = Speed - output1;

  if (lms > 127) lms = 127;
  if (rms > 127) rms = 127;
  if (lms < 48) lms = 48;
  if (rms < 48) rms = 48;
  
  if(!sprobe)
  {
    Robot.motorsWrite(lms,rms);
  }
  Serial.print(lms);
  Serial.print(" ");
  Serial.println(rms);
  sprobe = 0;
  delay(dt1);

}
void wallf2()
{
  
}

void linef2(){
  Robot.updateIR();
    for(int i=0; i<5; i++){
      irs[i]=Robot.IRarray[i];
    }
   for(int count=0; count<5; count++)
  {
    irs2[count]=map(Robot.IRarray[count],0,1023,0,127);
    acu+=irs[count];
  }

  //Serial.println(millis());
  if (acu > 50)
  {
    acu/=5;

    int error = ((irs2[0]<<6)+(irs2[1]<<5)-(irs2[3]<<5)-(irs2[4]<<6))/acu;

    error = constrain(error,-100,100);

    //Calculamos la correcion de velocidad mediante un filtro PD
    int vel = (error2 * KP2)/10 + (error2-last_error2)*KD2;

    last_error2 = error2;

    //Corregimos la velocidad de avance con el error de salida del filtro PD
    int motor_left = constrain((Speed + vel),-255,255);
    int motor_right =constrain((Speed - vel),-255,255);

    //Movemos el robot
    //motorsWritePct(motor_left,motor_right);
    Robot.motorsWrite(motor_left,motor_right);

    //Esperamos un poquito a que el robot reaccione
    delay(10);
  }
  
  if (irs[4] < THRESHOLD && irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0] < THRESHOLD || irs[4] > THRESHOLD && irs[3] > THRESHOLD && irs[2] > THRESHOLD && irs[1] > THRESHOLD && irs[0] > THRESHOLD)
  {
    IRScore = 50;
    
    if((lfprobe < 200 && lfprobe > 0) && (rtprobe < 200 && rtprobe > 0))
    {
      State = 1;
      Serial.println("wallf");
    }
    
  }
}

void linef(){
  Serial.println("line");
    Robot.updateIR();
    for(int i=0; i<5; i++){
      irs[i]=Robot.IRarray[i];
    }
  if (irs[2] < THRESHOLD || (irs[1] < THRESHOLD && irs[2] < THRESHOLD && irs[3] < THRESHOLD))
    IRScore = 50;
  if (irs[3] < THRESHOLD)
    IRScore = 25;
  if (irs[1] < THRESHOLD)
    IRScore = 75;
  if (irs[4] < THRESHOLD)
    IRScore = 0;
  if (irs[0] < THRESHOLD)
    IRScore = 100;

  if (irs[3] < THRESHOLD && irs[2] < THRESHOLD)
    IRScore = 12.5;
  if (irs[2] < THRESHOLD && irs[1] < THRESHOLD)
    IRScore = 87.5;

  if (irs[4] < THRESHOLD && irs[0] < THRESHOLD) //STRAIGHT
    IRScore = 50;

  if (irs[4] < THRESHOLD && irs[3] < THRESHOLD && irs[2]) //3 IRs to left
    IRScore = 12.5;
  if (irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0]) //3 IRs to right
    IRScore = 87.5;

  if (irs[4] < THRESHOLD && irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD) //4 IRs to left
    IRScore = 12.5;
  if (irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0] < THRESHOLD) //4 IRs to right
    IRScore = 87.5;

  if (irs[4] < THRESHOLD && irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0] < THRESHOLD || irs[4] > THRESHOLD && irs[3] > THRESHOLD && irs[2] > THRESHOLD && irs[1] > THRESHOLD && irs[0] > THRESHOLD)
  {
    IRScore = 50;
  }
  if(0)
  {
  if (irs[4] < THRESHOLD && irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0] < THRESHOLD || irs[4] > THRESHOLD && irs[3] > THRESHOLD && irs[2] > THRESHOLD && irs[1] > THRESHOLD && irs[0] > THRESHOLD)
  {
    IRScore = 50;
    
    if((lfprobe < 200 && lfprobe > 0) && (rtprobe < 200 && rtprobe > 0))
    {
      State = 1;
      Serial.println("wallf");
    }
  }
  }
  if (irs[4] > THRESHOLD && irs[3] < THRESHOLD && irs[2] < THRESHOLD && irs[1] < THRESHOLD && irs[0] > THRESHOLD)
    IRScore = 50;

  
  error = TARGET - IRScore;
  motorgain = Kp * error + Kd * (error - lasterror);
  lasterror = error;

  rightmotorspeed = Speed + motorgain;
  leftmotorspeed = Speed - motorgain;

  if (leftmotorspeed > 255) leftmotorspeed = 255;
  if (rightmotorspeed > 255) rightmotorspeed = 255;
  if (leftmotorspeed < -255) leftmotorspeed = -255;
  if (rightmotorspeed < -255) rightmotorspeed = -255;
  
    if (rightmotorspeed != leftmotorspeed)
      Robot.motorsWrite(leftmotorspeed/divider,rightmotorspeed/divider);
    else
      Robot.motorsWrite(leftmotorspeed,rightmotorspeed);
  Serial.println(IRScore);
}



int range(int port)
{
  int duration;

  pinMode(port, OUTPUT);
  digitalWrite(port, HIGH);
  delayMicroseconds(10);
  digitalWrite(port, LOW);

  pinMode(port, INPUT);
  return (pulseIn(port, HIGH)/2)/3;
}

void tright()
{
  Robot.motorsWrite(108,-108);
  delay(500);
  Robot.motorsStop();
  delay(250);
}
void tleft()
{
  Robot.motorsWrite(-108,108);
  delay(500);
  Robot.motorsStop();
  delay(250);
}

void treset()
{
  ticks = tt.every(100,tevent);
}

void tevent(){
  tev +=1;
}

void tstop(){
  tt.stop(ticks);
}

void modech(){
  if (Robot.keyoardRead() == BUTTON_UP)
    State = 0;
  if (Robot.keyoardRead() == BUTTON_DOWN)
    State = 1;
  Serial.println (State);
}
